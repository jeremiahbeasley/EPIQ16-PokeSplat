use Libraries.Game.Game
use Libraries.Game.Graphics.Model
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Camera
use Libraries.Game.Graphics.PointLight
use Libraries.Game.Graphics.PerspectiveCamera
use Libraries.Game.Layer3D
use Libraries.Game.Graphics.AmbientLight
use Libraries.Game.Graphics.DirectionalLight
use Libraries.Interface.Events.KeyboardListener
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Game.Audio3D
use Libraries.Game.Graphics.Label
use Libraries.Sound.Speech
use Libraries.Compute.Vector3
use Libraries.Game.Graphics.Texture
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Layer2D
use Libraries.Compute.Random

/*
    This is a default class for creating a game in Quorum. Note that the Main 
    action begins by calling StartGame(), which loads a window a game can 
    be displayed in. The action CreateGame is where the game should load any 
    assets, like images to be displayed, frames of animation, or sounds to be
    played. 
*/
class Main is Game, KeyboardListener
    /*
        This action, Main, starts our computer program. In Quorum, programs always
        begin from Main.
    */

    // The camera
    PerspectiveCamera camera = undefined

    // The character and the light
    Model pikachu
    PointLight pikachuLight

    // The model for the walls and their color
    Model wallLeft
    Model wallRight
    Model floor
    Color grey
    Color red
    Color yellow
    Color colorpball1

    // The speed of the character when he moves
    number speed = 8

    // These are the values that we will use to move the character
    number positionX = 0
    number positionY = 0
    number positionZ = 0
    number vpositionX = 0
    number vpositionY = 0
    number vpositionZ = 0

    number facing = 0
    number level = 1


    // The first box made
    Model pball1
    Model pball2
    Model pball3
    //Color of the first box
    Color colorBox1
    Color colorBox2
    // Adds sound to the first box
    Audio3D pball1Sound
    Audio3D pball2Sound
    Audio3D pball3Sound

    // Sets up the end goal of the game
    Model goal
    boolean isTouched = false
    boolean badEnding = true
    Label gameOverZone
    Speech talk
    number speakerLimit = 0
    Texture textureSky
    Texture textureGrass
    Drawable space
    Random pikachuTalkRandom
    Audio3D pikachuTalk
    Audio3D ashTalk
    integer pikachuTalkTimer = 0
    Random random

    action Main
    SetFullScreen(true)   
    StartGame()
        
        
    end

    /*
        This action sets up the default values for a game. For example, we might
        use the Libraries.Game.Graphics.Drawable class to load up an image or 
        a shape. Or, we might add a Libraries.Interface.Button for making something clickable
        or a Libraries.Interface.TextBox for gathering user input in a game.
    */
    action CreateGame
        


        // Initialize camera position, and direction
        AmbientLight ambient
        ambient:SetColor(255, 255, 204, 1)
        SetAmbientLight(ambient)

        DirectionalLight light
        light:SetColor(255, 255, 204, 1)
        light:SetDirection(0, 0, -3)
        Add(light)

        Layer2D layer   
        AddLayer(0, layer)  
        textureSky:LoadFromFile("Models/space.png")
        space:Load(textureSky)
        space:Scale(0.70)
        layer:Add(space)
 
        // Initialize character, his size and position
        pikachu:Load("Models/pikachu-pokemon-go-obj/pikachu-pokemon-go.obj")
        pikachu:Scale(0.05, 0.05, 0.05)
        pikachu:SetPosition(0, 0, 0)
        facing = 1
        Add(pikachu)

        pikachuTalk:Load("Sounds/pikachu.ogg")


        pikachuLight:SetColor(255, 255, 204, 50)
        pikachuLight:SetPosition(-1, 5, 5)
        pikachuLight:SetIntensity(1)
        pikachu:Add(pikachuLight)

        camera = cast(PerspectiveCamera,GetCamera3D())
 //       camera:SetPosition(0, -3, -2)
        camera:LookAt(0, 1, 0)
        camera:SetPosition(pikachu:GetPosition():GetX(),pikachu:GetPosition():GetY()+4,pikachu:GetPosition():GetZ()-3)

        ashTalk:Load("Sounds/Ash-letsgo.ogg")
        ashTalk:SetVolume(0.8)
        ashTalk:Play()
        
        colorpball1:SetColor(255, 0, 0, 1)
        pball1:LoadSphere(5,5,5, colorpball1)
        //pball1:Load("Models/pokeball.obj")
        pball1:Scale(0.75, 0.75, 0.75)
        pball1:SetPosition(0, 0, 15)
        Add(pball1)

        pball1Sound:Load("Sounds/pokeball.ogg")
        pball1Sound:SetVolume(0)
        pball1Sound:EnableLooping()
        pball1Sound:EnableDoppler()      
             pball1Sound:Play()
        
 
        Color blue
        blue = blue:Blue()
        goal:LoadBox(50,5,5, blue)
        goal:SetPosition(0, 0, 50)
        Add(goal)
        gameOverZone:SetSize(30,10)
        gameOverZone:SetPosition(0,0,50)

        Color yellow
        yellow:SetColor(255,255,254,0.8) 
        floor:LoadBox(50,5,60, yellow)
        floor:SetPosition(0, -5, 20)
        Add(floor)



        // Add a keyboardListener to move the character
        AddKeyboardListener(me)
    end

    /*
        The update action is called on every "frame" of animation in a game. This
        action should be used to do operations on items. So, for example, we 
        might use this action to change frames of animation, to rotate items, 
        or to make creatures jump.
    */
    action Update(number seconds)

        // Moves the character every update depending on the values of the 3 fields

        pikachu:Move(positionX*seconds, positionY*seconds, positionZ*seconds)
        camera:SetPosition(pikachu:GetPosition():GetX(),pikachu:GetPosition():GetY()+4,pikachu:GetPosition():GetZ()-3)

        pokeball1(seconds)

 end

    action PressedKey(KeyboardEvent event)
        if event:keyCode = event:UP
            MoveForward(speed)
            if facing = 2
            pikachu:Rotate(0,1,0, 180, false)
            TalkPikachu()
            elseif facing = 3
            pikachu:Rotate(0,1,0, -90, false)
            TalkPikachu()
            elseif facing = 4
            pikachu:Rotate(0,1,0, 90, false)
            TalkPikachu()
            end
            facing = 1
        elseif event:keyCode = event:DOWN
            MoveBackward(speed)
            if facing = 1
            pikachu:Rotate(0,1,0, 180, false)
            TalkPikachu()
            elseif facing = 3
            pikachu:Rotate(0,1,0, 90, false)
            TalkPikachu()
            elseif facing = 4
            pikachu:Rotate(0,1,0, -90, false)
            TalkPikachu()
            end
            facing = 2
        elseif event:keyCode = event:LEFT
            StrafeLeft(speed)
            if facing = 4
            pikachu:Rotate(0,1,0, 180, false)
            TalkPikachu()
            elseif facing = 2
            pikachu:Rotate(0,1,0, -90, false)
            TalkPikachu()
            elseif facing = 1
            pikachu:Rotate(0,1,0, 90, false)
            TalkPikachu()
            end
            facing = 3
        elseif event:keyCode = event:RIGHT
            StrafeRight(speed)
            if facing = 3
            pikachu:Rotate(0,1,0, 180, false)
            TalkPikachu()
            elseif facing = 1
            pikachu:Rotate(0,1,0, -90, false)
            TalkPikachu()
            elseif facing = 2
            pikachu:Rotate(0,1,0, 90, false)
            TalkPikachu()
            end
            facing = 4
        elseif event:keyCode = event:H
            pikachu:SetPosition(0, 0, 0)
        elseif event:keyCode = event:X
            Exit()
        elseif event:keyCode = event:Q
            Exit()
        end
    end


    action ReleasedKey(KeyboardEvent event)
        positionX = 0      
        positionY = 0
        positionZ = 0
    end

    action MoveForward(number speed) 
        positionX = 0      // we move forward
        positionY = 0
        positionZ = speed
    end

    action MoveBackward(number speed)
        positionX = 0      // we move forward
        positionY = 0
        positionZ = -speed    
    end
    
    action StrafeLeft(number speed)
        positionX = -speed      // we move forward
        positionY = 0
        positionZ = 0
    end

    action StrafeRight(number speed)
        positionX = speed      // we move forward
        positionY = 0
        positionZ = 0
    end

    action StopCharacter()
        positionX = 0      
        positionY = 0
        positionZ = 0
    end

    action TalkPikachu()
        pikachuTalk:SetVolume(0.8)
        pikachu:Add(pikachuTalk)
        pikachuTalk:Play()
    end


    action pokeball1(number seconds)
        pball1:Move(seconds * 5, 0, 0)

           if pball1:GetX() >  15// -30 is the Z-Axis position of the left wall 
                Remove(pball1) // we remove it temporarly of the scene
                pball1:SetX(-15) // the starting point
                Add(pball1) // we put it again on the scene
            end


            
            if pikachu:GetPosition():GetZ() - 7 < pball1:GetZ() and pikachu:GetPosition():GetZ() + 7 > pball1:GetZ()
                /* if the character is near a box we play the sound car */
            
            pball1Sound:SetVolume(1.0)
            pball1Sound:SetListenerPosition(pikachu:GetPosition())
            pball1Sound:SetListenerDirection(camera:GetDirection())
            pball1:Add(pball1Sound)            
            else
            pball1Sound:SetVolume(0)
            end
    end


    action IsNearCar(Model pikachu, Model pball1, Audio3D pballSound) returns boolean
        pballSound:SetListenerDirection(camera:GetDirection())
        return pikachu:GetPosition():GetX() < pball1:GetX() + 5 and pikachu:GetPosition():GetX() > pball1:GetX() - 5
        and pikachu:GetPosition():GetZ() < pball1:GetZ() + 5 and pikachu:GetPosition():GetZ() > pball1:GetZ() - 5
    end

    action IsColliding(Model pikachu, Model pball1) returns boolean
        if pikachu:GetX() < pball1:GetX()+(pball1:GetWidth()/4) and pikachu:GetX() > pball1:GetX()-(pball1:GetWidth()/4) and pikachu:GetZ() < pball1:GetZ()+(pball1:GetDepth()/4) and pikachu:GetZ() > pball1:GetZ()-(pball1:GetDepth()/4)
            return true
        else
            return false
        end
    end

end